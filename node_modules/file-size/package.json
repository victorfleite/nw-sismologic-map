{
  "name": "file-size",
  "version": "1.0.0",
  "description": "Lightweight filesize to human-readable / proportions w/o dependencies.",
  "main": "index.js",
  "scripts": {
    "test": "make test",
    "coverage": "make coverage"
  },
  "keywords": [
    "filesize",
    "file",
    "size",
    "bytes",
    "human",
    "readable",
    "iec",
    "si",
    "jedec",
    "filesystem",
    "humanize",
    "numbers"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Nijikokun/file-size.git"
  },
  "author": {
    "name": "Nijiko Yonskai",
    "email": "nijikokun@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "istanbul": "^0.3.13",
    "mocha": "^1.20.1",
    "should": "^4.0.1"
  },
  "readme": "# File-size.js\n\n![filesize](http://puu.sh/5JspS.png)\n\nFile-size module for node.js for converting, manipulating, and handling file-sizes.\n\n\n## Features\n\n- Zero Dependencies.\n- Supports IEC (power `1024`, _default_), SI (power `1000`), and JEDEC (Alternative SI Unit Notation).\n- Conversion from `bytes` to `K`, `M`, `G`, and so forth...\n- Customizable human-readable output.\n\n## Installation\n\n```bash\n$ npm install file-size\n```\n\nNow require it in your files like so:\n\n```javascript\nvar filesize = require('file-size');\n```\n\n## Usage\n\n```javascript\nfilesize(Number bytes, Object options)\n```\n\nUsing filesize is very easy, a lot easier if you know the [Specification Table](http://en.wikipedia.org/wiki/Template:Quantities_of_bytes). However,\nit's not required to know it, and in most cases you won't need it.\n\n\n**Initialization**\n\nFilesize works in a jQuery chainable manner so you can use multiple instances without trouble.\n\n```javascript\nvar size = filesize(186457865);\n```\n\n**Options**\n\n```javascript\nvar size = filesize(186457865, {\n  fixed: 2,\n  spacer: ' '\n});\n```\n\n- `fixed` - Number of positions after the decimal to show, default is `2`\n- `spacer` - Space between the number and the unit, default is a space ` `\n\n### size.human(String spec) -> String\n\nGenerates human readable filesize.\n\n- `spec` can be one of the following:\n  - `si`\n  - `iec`\n  - `jedec`\n\n##### IEC Specification\n\n*Default*\n\nPower of `1024`\n\n```javascript\n// outputs: 177.82 MiB\nfilesize(186457865).human();\n```\n\n##### SI Specification\n\nPower of `1000`\n\n```javascript\n// outputs: 186.46 MB\nfilesize(186457865).human('si');\n```\n\n##### JEDEC Specification\n\nChanges IEC default unit notation `iB` to `B` for the following: `KB`, `MB`, `GB`\n\nThe rest are in `iB` notation, as per JEDEC Specification.\n\n```javascript\n// outputs: 186.46 MB\nfilesize(186457865).human('jedec');\n```\n\n### size.to(String unit, String spec) -> String\n\nConverts `bytes` to another filesize `unit`\n\n- `unit` of size can be one of the following:\n  - `B`, `KB`, `MB`, `GB`, `TB`, `PB`, `EB`, `ZB`, `YB`\n- `spec` can be one of the following:\n  - `si`\n  - `iec`\n  - `jedec`\n\n##### IEC Specification\n\n*Default*\n\n```javascript\n// outputs: 177.82\nfilesize(186457865).to('MB');\n```\n\n##### SI Specification\n\n```javascript\n// outputs: 186.46\nfilesize(186457865).to('MB', true);\n```\n\n### size.calculate(String spec) -> Object\n\nCalculates suffix, magnitude, fixed, non-fixed, bits (fixed, non-fixed) from specified bytes against the specified `spec`.\n\n- `spec` can be one of the following:\n  - `si`\n  - `iec`\n  - `jedec`\n\n```js\n/*\n * outputs:\n *\n *    {\n *      suffix: 'Bytes',\n *      magnitude: 0,\n *      result: 8,\n *      fixed: '8.00',\n *      bits: { result: 1, fixed: '1.00' }\n *    }\n*/\n\nvar result = filesize(8).calculate()\n```",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/Nijikokun/file-size/issues"
  },
  "_id": "file-size@1.0.0",
  "dist": {
    "shasum": "fb500e7ad186ae927c7e691cebb2d10268a585db"
  },
  "_from": "file-size@^1.0.0",
  "_resolved": "https://registry.npmjs.org/file-size/-/file-size-1.0.0.tgz"
}
